---
description: Security audit report commands
globs: 
alwaysApply: false
---
---
description: Security audit report commands
globs: 
alwaysApply: false
---
# Security Audit Tools - FastAPI Python Project

## Quick Security Audit Script

Run this from your project root to check for potential security issues:

```bash
#!/bin/bash
# security-audit.sh - Quick security audit for FastAPI routes

echo "üîç Security Audit Report"
echo "========================"

echo -e "\n1. FastAPI routes without authentication decorators:"
echo "   (Look for @app.get, @app.post etc. without auth dependencies)"
grep -r "@app\.\(get\|post\|put\|delete\)" backend/ api/ | \
  grep -v "dependencies=\|Depends(" | \
  cut -d: -f1 | sort | uniq

echo -e "\n2. CORS configuration check:"
echo "   (Verify CORS origins are not set to '*' in production)"
grep -r "allow_origins.*\*" backend/ api/ || echo "   ‚úÖ No wildcard CORS found"

echo -e "\n3. Endpoints without input validation:"
echo "   (Check for endpoints that don't use Pydantic models)"
grep -r "def.*request.*:" backend/ api/ | \
  grep -v "BaseModel\|Request.*:" | \
  head -10

echo -e "\n4. Environment variable usage:"
echo "   (Verify sensitive data uses environment variables)"
grep -r "api_key\|secret\|password" backend/ api/ | \
  grep -v "getenv\|environ" | \
  grep -v "API_KEY.*=" | \
  head -5

echo -e "\n5. üö® CRITICAL: Unprotected sensitive endpoints:"
echo "   (Check for endpoints that expose system information or admin functions)"
grep -r "@app\.\(get\|post\)" backend/ api/ | \
  grep -v "health\|status\|/" | \
  cut -d: -f1 | sort | uniq

echo -e "\n6. Error handling patterns:"
echo "   (Check for potential information disclosure in error messages)"
grep -r "raise.*Exception\|raise.*Error" backend/ api/ | \
  grep -v "HTTPException" | \
  head -5

echo -e "\n‚úÖ Audit complete! Review flagged items manually."
```

## Python/FastAPI Security Audit Commands

**For Unix/Linux/Mac (bash):**

```bash
# Find FastAPI routes without proper authentication
grep -r "@app\.\(get\|post\|put\|delete\)" backend/ api/ | grep -v "dependencies="

# Check for hardcoded secrets or API keys
grep -r "api_key.*=.*[\"']" backend/ api/ | grep -v "getenv\|environ"

# Find endpoints without Pydantic validation
grep -r "async def.*(" backend/ api/ | grep -v "BaseModel\|Request"

# Check CORS configuration
grep -r "CORSMiddleware\|allow_origins" backend/ api/

# Find potential information disclosure in exceptions
grep -r "Exception.*:" backend/ api/ | grep -v "HTTPException"

# Check for SQL injection possibilities (if using raw SQL)
grep -r "execute.*%" backend/ api/ || echo "No raw SQL found"

# Look for file upload endpoints without validation
grep -r "UploadFile\|File(" backend/ api/

# Check logging for sensitive data exposure
grep -r "logger.*log\|print(" backend/ api/ | head -10
```

**For Windows (PowerShell):**

```powershell
# Find FastAPI routes without authentication
Get-ChildItem -Path backend,api -Recurse -Include *.py | Select-String -Pattern "@app\.(get|post|put|delete)" | Where-Object { $_.Line -notmatch "dependencies=" }

# Check for CORS wildcard configuration
Select-String -Path "backend\main.py" -Pattern "allow_origins.*\*"

# Find hardcoded API keys (should return nothing)
Get-ChildItem -Path backend,api -Recurse -Include *.py | Select-String -Pattern "api_key.*=.*['\"]" | Where-Object { $_.Line -notmatch "getenv|environ" }

# Check environment variable usage (should find proper usage)
Get-ChildItem -Path backend,api -Recurse -Include *.py | Select-String -Pattern "getenv.*API_KEY"

# Find all Python files for manual review
Get-ChildItem -Path backend,api -Recurse -Include *.py | Select-Object Name, FullName
```

## Manual Security Checklist

For each FastAPI endpoint, verify:

### Authentication & Authorization
- [ ] Uses proper FastAPI dependencies for authentication
- [ ] Implements proper user session management
- [ ] No public access to sensitive operations
- [ ] API key validation where appropriate

### Input Validation
- [ ] Uses Pydantic models for request validation
- [ ] Validates file uploads (size, type, content)
- [ ] Sanitizes all user inputs
- [ ] Implements proper rate limiting

### Configuration Security
- [ ] CORS origins properly configured (not '*' in production)
- [ ] Environment variables used for secrets
- [ ] Proper logging configuration (no sensitive data)
- [ ] Security headers implemented

### Error Handling
- [ ] Uses HTTPException for proper error responses
- [ ] No sensitive information in error messages
- [ ] Consistent error response format
- [ ] Proper logging of security events

## Security Issues Found in Current Codebase

### üîç Current Routes Found:
- `GET /` - Health check endpoint (backend/main.py:54)
- `POST /api/model_search` - Model recommendation endpoint (backend/main.py:63)

### üö® HIGH PRIORITY Issues

1. **Open CORS Policy**
   ```python
   # backend/main.py lines 29-34
   app.add_middleware(
       CORSMiddleware,
       allow_origins=["*"],  # üö® Allows ANY origin in production
       allow_credentials=True,
       allow_methods=["*"],
       allow_headers=["*"],
   )
   ```
   **Risk**: Any website can make requests to your API
   **Fix**: Specify exact origins for production
   ```python
   ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000").split(",")
   app.add_middleware(
       CORSMiddleware,
       allow_origins=ALLOWED_ORIGINS,
       allow_credentials=True,
       allow_methods=["GET", "POST"],  # Only needed methods
       allow_headers=["Authorization", "Content-Type"],
   )
   ```

2. **No Authentication on API Endpoints**
   ```python
   # Both routes in backend/main.py have NO authentication:
   @app.get("/")  # Line 54 - No dependencies
   @app.post("/api/model_search", response_model=ModelSearchResponse)  # Line 63 - No dependencies
   ```
   **Risk**: Anyone can use your OpenAI API quota and access the service
   **Fix**: Add authentication dependency
   ```python
   from fastapi import Depends
   from fastapi.security import HTTPBearer
   
   security = HTTPBearer()
   
   @app.post("/api/model_search", dependencies=[Depends(verify_api_key)])
   async def search_models(request: ModelSearchRequest):
   ```

3. **No Rate Limiting**
   ```python
   # üö® No protection against abuse of expensive OpenAI API calls
   # Someone could spam requests and exhaust your OpenAI credits
   ```
   **Risk**: API abuse leading to high OpenAI costs
   **Fix**: Implement rate limiting with slowapi
   ```python
   from slowapi import Limiter, _rate_limit_exceeded_handler
   
   limiter = Limiter(key_func=get_remote_address)
   app.state.limiter = limiter
   
   @app.post("/api/model_search")
   @limiter.limit("10/minute")
   async def search_models(request: Request, model_request: ModelSearchRequest):
   ```

### üî∂ MEDIUM PRIORITY Issues

4. **Basic Input Validation**
   ```python
   # backend/main.py lines 67-69
   if not request.query or not request.query.strip():
       raise HTTPException(status_code=400, detail="Query cannot be empty")
   ```
   **Improvement**: Add length and content validation
   ```python
   class ModelSearchRequest(BaseModel):
       query: str = Field(..., min_length=1, max_length=1000, 
                          description="Search query for model recommendations")
   ```

5. **Error Information Disclosure**
   ```python
   # api/model_search.py and backend/main.py
   # Error messages might expose internal details
   ```

## Recommended Security Implementations

### 1. Add Authentication Middleware

```python
# backend/auth.py
from fastapi import HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import os

security = HTTPBearer()

async def verify_api_key(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Verify API key from Authorization header"""
    api_key = os.getenv("API_KEY")
    if not api_key:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Server configuration error"
        )
    
    if credentials.credentials != api_key:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API key"
        )
    
    return credentials.credentials

# Usage in routes
@app.post("/api/model_search", dependencies=[Depends(verify_api_key)])
async def search_models(request: ModelSearchRequest):
    # Protected endpoint
```

### 2. Implement Rate Limiting

```python
# requirements.txt
slowapi==0.1.9

# backend/main.py
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

@app.post("/api/model_search")
@limiter.limit("10/minute")  # Limit to 10 requests per minute
async def search_models(request: Request, model_request: ModelSearchRequest):
    # Rate-limited endpoint
```

### 3. Enhanced Input Validation

```python
# backend/models.py
from pydantic import BaseModel, Field, validator
import re

class ModelSearchRequest(BaseModel):
    query: str = Field(
        ..., 
        min_length=1, 
        max_length=1000,
        description="Search query for model recommendations"
    )
    
    @validator('query')
    def validate_query(cls, v):
        # Remove potentially harmful characters
        if re.search(r'[<>"\']', v):
            raise ValueError('Query contains invalid characters')
        return v.strip()
```

### 4. Security Headers Middleware

```python
# backend/middleware.py
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware

class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        response = await call_next(request)
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        return response

# Add to main.py
app.add_middleware(SecurityHeadersMiddleware)
```

### 5. Secure CORS Configuration

```python
# backend/main.py - Environment-based CORS
import os

ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000").split(",")

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,  # Environment-controlled origins
    allow_credentials=True,
    allow_methods=["GET", "POST"],  # Only needed methods
    allow_headers=["Authorization", "Content-Type"],  # Specific headers
)
```

## Environment Variables Security

### Required Environment Variables

```bash
# .env (DO NOT COMMIT)
OPENAI_API_KEY=your_openai_api_key_here
API_KEY=your_secure_api_key_for_client_auth
ALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com
ENVIRONMENT=development  # or 'production'
LOG_LEVEL=INFO
```

### Environment Variable Validation

```python
# backend/config.py
import os
from typing import List

class Settings:
    openai_api_key: str = os.getenv("OPENAI_API_KEY")
    api_key: str = os.getenv("API_KEY")
    allowed_origins: List[str] = os.getenv("ALLOWED_ORIGINS", "").split(",")
    environment: str = os.getenv("ENVIRONMENT", "development")
    log_level: str = os.getenv("LOG_LEVEL", "INFO")
    
    def __post_init__(self):
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        if not self.api_key and self.environment == "production":
            raise ValueError("API_KEY environment variable is required in production")

settings = Settings()
```

### ‚úÖ Good Security Practices Found:

1. **Environment Variables for Secrets**
   ```python
   # backend/services/openai_service.py:28 and api/services/openai_service.py:22
   OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # ‚úÖ Properly using environment variables
   ```

2. **Input Validation**
   ```python
   # backend/main.py:67-69
   if not request.query or not request.query.strip():
       raise HTTPException(status_code=400, detail="Query cannot be empty")
   ```

3. **Pydantic Models**
   ```python
   # backend/main.py:38-53 - Using proper request/response models
   class ModelSearchRequest(BaseModel):
       query: str
   ```

## Security Testing Commands

**Current Security Issues Test:**

```bash
# üö® This will work - showing NO authentication protection
curl -X POST http://localhost:3298/api/model_search \
  -H "Content-Type: application/json" \
  -d '{"query": "test"}'

# Test CORS from any origin (this will work due to wildcard CORS)
curl -X POST http://localhost:3298/api/model_search \
  -H "Origin: https://malicious-site.com" \
  -H "Content-Type: application/json" \
  -d '{"query": "test"}'

# Test rate limiting (currently NO protection)
for i in {1..20}; do
  curl -X POST http://localhost:3298/api/model_search \
    -H "Content-Type: application/json" \
    -d '{"query": "spam request '$i'"}' &
done

# Test empty query validation (this should fail with 400)
curl -X POST http://localhost:3298/api/model_search \
  -H "Content-Type: application/json" \
  -d '{"query": ""}'

# Test malicious input (currently no content filtering)
curl -X POST http://localhost:3298/api/model_search \
  -H "Content-Type: application/json" \
  -d '{"query": "<script>alert(1)</script>"}'
```

**After implementing authentication:**

```bash
# Test with authentication (should work after implementing)
curl -X POST http://localhost:3298/api/model_search \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer your-api-key" \
  -d '{"query": "test"}'

# Test without authentication (should fail with 401)
curl -X POST http://localhost:3298/api/model_search \
  -H "Content-Type: application/json" \
  -d '{"query": "test"}'
```

## Integration with CI/CD

Add this to your GitHub Actions:

```yaml
# .github/workflows/security-audit.yml
name: Security Audit
on: [push, pull_request]

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install bandit safety
          
      - name: Run Bandit Security Scanner
        run: bandit -r backend/ api/ -f json -o bandit-report.json || true
        
      - name: Check for known vulnerabilities
        run: safety check --json --output safety-report.json || true
        
      - name: Run Custom Security Audit
        run: |
          # Check for unprotected routes
          UNPROTECTED=$(grep -r "@app\.\(get\|post\|put\|delete\)" backend/ api/ | grep -v "dependencies=" | wc -l)
          if [ $UNPROTECTED -gt 1 ]; then  # Allow health check endpoint
            echo "‚ùå Found $UNPROTECTED potentially unprotected routes"
            grep -r "@app\.\(get\|post\|put\|delete\)" backend/ api/ | grep -v "dependencies="
            exit 1
          else
            echo "‚úÖ Routes properly protected"
          fi
          
          # Check CORS configuration
          if grep -r "allow_origins.*\*" backend/ api/; then
            echo "‚ùå Wildcard CORS detected"
            exit 1
          else
            echo "‚úÖ CORS properly configured"
          fi
```

## Production Deployment Security

### Docker Security
```dockerfile
# Use non-root user
FROM python:3.9-slim
RUN adduser --disabled-password --gecos '' appuser
USER appuser

# Set security-focused environment
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Copy and install requirements first (layer caching)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY --chown=appuser:appuser . .

# Run with limited privileges
EXPOSE 3298
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3298"]
```

### Monitoring & Logging
```python
# backend/logging_config.py
import logging
import sys
from pythonjsonlogger import jsonlogger

def setup_logging():
    logHandler = logging.StreamHandler(sys.stdout)
    formatter = jsonlogger.JsonFormatter()
    logHandler.setFormatter(formatter)
    logger = logging.getLogger()
    logger.addHandler(logHandler)
    logger.setLevel(logging.INFO)
    
    # Don't log sensitive data
    logging.getLogger("uvicorn.access").addFilter(
        lambda record: "api_key" not in record.getMessage().lower()
    )
```

## üö® IMMEDIATE ACTION ITEMS for Your Codebase

### Critical Issues to Fix NOW:

1. **Add API Authentication** (HIGH PRIORITY)
   - Currently anyone can use your OpenAI API quota
   - Implement API key authentication before deploying

2. **Fix CORS Configuration** (HIGH PRIORITY)
   - Change `allow_origins=["*"]` to specific domains
   - This prevents unauthorized websites from using your API

3. **Add Rate Limiting** (MEDIUM PRIORITY)
   - Prevent abuse that could exhaust your OpenAI credits
   - Implement per-IP or per-key rate limiting

### OpenAI-Specific Security Considerations

**Cost Protection:**
```python
# Add request cost monitoring
@app.middleware("http")
async def monitor_openai_usage(request: Request, call_next):
    if request.url.path == "/api/model_search":
        # Log request for cost tracking
        logger.info(f"OpenAI request from {request.client.host}")
    response = await call_next(request)
    return response
```

**Input Sanitization for AI:**
```python
import re

class ModelSearchRequest(BaseModel):
    query: str = Field(..., min_length=1, max_length=500)
    
    @validator('query')
    def sanitize_query(cls, v):
        # Remove potentially harmful prompts
        harmful_patterns = [
            r'ignore.*previous.*instructions',
            r'system.*prompt',
            r'role.*play',
        ]
        for pattern in harmful_patterns:
            if re.search(pattern, v, re.IGNORECASE):
                raise ValueError("Query contains potentially harmful content")
        return v.strip()
```

**OpenAI Error Handling:**
```python
# Don't expose OpenAI errors to clients
try:
    result = await openai_service.get_model_recommendations(request.query)
except openai.APIError as e:
    logger.error(f"OpenAI API error: {e}")
    raise HTTPException(status_code=503, detail="Service temporarily unavailable")
except Exception as e:
    logger.error(f"Unexpected error: {e}")
    raise HTTPException(status_code=500, detail="Internal server error")
```

## üìã Security Checklist for Production

- [ ] **Authentication**: API key or OAuth implemented
- [ ] **CORS**: Specific origins only, no wildcards
- [ ] **Rate Limiting**: Implemented to prevent abuse
- [ ] **Input Validation**: Enhanced with content filtering
- [ ] **Environment Variables**: All secrets in .env (not committed)
- [ ] **Error Handling**: No sensitive information disclosed
- [ ] **Logging**: Security events logged, no sensitive data
- [ ] **HTTPS**: TLS/SSL enabled in production
- [ ] **OpenAI Monitoring**: Usage and cost tracking implemented

Remember: Security is an ongoing process. Regularly review and update these measures as your application evolves.
