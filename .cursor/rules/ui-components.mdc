---
description: UI component and styling guidelines using Shadcn UI, Radix UI, and Tailwind
globs: 
alwaysApply: false
---
# UI Components and Styling

## UI Framework
- Use Shadcn UI and Radix UI for components with Tailwind CSS for styling
- Implement responsive design with Tailwind CSS using a mobile-first approach
- This is a Vite React application (not Next.js)
- Use Lucide React for icons

## Install new Shadcn components

```sh
npm dlx shadcn@latest add COMPONENT
```

Example:

```sh
npm dlx shadcn@latest add progress
```

## Data Fetching Patterns

The app uses TanStack Query (React Query) but primarily implements data fetching with native fetch API and useState/useEffect:

```typescript
const [data, setData] = useState<DataType[]>([]);
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);

useEffect(() => {
  const loadData = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/endpoint');
      
      if (!response.ok) {
        throw new Error(`Failed to load data: ${response.status} ${response.statusText}`);
      }
      
      const result = await response.json();
      setData(result);
    } catch (error) {
      console.error('Error loading data:', error);
      setError(error instanceof Error ? error.message : 'Failed to load data');
    } finally {
      setLoading(false);
    }
  };

  loadData();
}, []);
```

## Toast Notifications

Use the `useToast` hook from shadcn/ui for user notifications:

```typescript
import { useToast } from "@/hooks/use-toast";

const { toast } = useToast();

// Success toast
toast({
  title: "Success! âœ…",
  description: "Your data has been saved successfully.",
});

// Error toast
toast({
  title: "Error",
  description: "Something went wrong. Please try again.",
  variant: "destructive",
});

// Form validation error
if (!email) {
  toast({
    title: "Email Required",
    description: "Please enter your email address.",
    variant: "destructive",
  });
  return;
}
```

Alternative: Use Sonner for simpler toast notifications (available via `@/components/ui/sonner`).

## Loading States

### Simple Loading Text
```typescript
if (loading) {
  return (
    <div className="flex justify-center items-center h-64">
      <div className="text-xl text-gray-600">Loading...</div>
    </div>
  );
}
```

### Skeleton Loading
Use the Skeleton component for content placeholders:

```tsx
import { Skeleton } from "@/components/ui/skeleton";

<div className="space-y-4">
  <Skeleton className="h-4 w-[250px]" />
  <Skeleton className="h-4 w-[200px]" />
  <Skeleton className="h-4 w-[150px]" />
</div>
```

### Loading Buttons
```tsx
<Button disabled={isSubmitting}>
  {isSubmitting ? (
    <div className="flex items-center space-x-2">
      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
      <span>Loading...</span>
    </div>
  ) : (
    'Submit'
  )}
</Button>
```

## Form Components

### Basic Form with React Hook Form
```tsx
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";

const { register, handleSubmit, formState: { errors } } = useForm();

// Text Input
<div>
  <Label htmlFor="email" className="text-sm font-medium text-gray-700">
    Email Address *
  </Label>
  <Input
    id="email"
    type="email"
    {...register("email", { required: true })}
    placeholder="your.email@example.com"
    className="mt-1"
  />
  {errors.email && <span className="text-red-500 text-sm">Email is required</span>}
</div>

// Textarea
<div>
  <Label htmlFor="message" className="text-sm font-medium text-gray-700">
    Message
  </Label>
  <Textarea
    id="message"
    {...register("message")}
    placeholder="Your message here..."
    className="mt-1 min-h-[120px]"
  />
</div>
```

### Form with Shadcn Form Components
```tsx
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
    <FormField
      control={form.control}
      name="email"
      render={({ field }) => (
        <FormItem>
          <FormLabel>Email</FormLabel>
          <FormControl>
            <Input placeholder="Enter your email" {...field} />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  </form>
</Form>
```

## Available UI Components

### Core Components (installed)
- `Alert` / `AlertDescription` / `AlertTitle`
- `AspectRatio`
- `Avatar`
- `Button` with variants (default, destructive, outline, secondary, ghost, link)
- `Card` / `CardContent` / `CardDescription` / `CardFooter` / `CardHeader` / `CardTitle`
- `Checkbox`
- `Collapsible`
- `Command` / `CommandDialog` / `CommandInput` / `CommandList`
- `Dialog` / `DialogContent` / `DialogDescription` / `DialogHeader` / `DialogTitle`
- `Form` components for React Hook Form integration
- `HoverCard`
- `Input` / `InputOTP`
- `Label`
- `Popover` / `PopoverContent` / `PopoverTrigger`
- `Select` / `SelectContent` / `SelectItem` / `SelectTrigger` / `SelectValue`
- `Sheet` (slide-out panels)
- `Skeleton`
- `Switch`
- `Table` / `TableBody` / `TableCell` / `TableHead` / `TableHeader` / `TableRow`
- `Textarea`
- `Toast` / `Toaster` (and Sonner alternative)
- `Tooltip` / `TooltipContent` / `TooltipProvider` / `TooltipTrigger`

### Theme Support
- Dark mode support via `next-themes`
- CSS variables for theming
- Tailwind CSS color palette integration

## Best Practices

1. **Always handle loading states** - Provide visual feedback during async operations
2. **Use proper error handling** - Show user-friendly error messages with toast notifications
3. **Implement proper form validation** - Use React Hook Form with appropriate validation rules
4. **Follow responsive design** - Use Tailwind's mobile-first responsive utilities
5. **Maintain accessibility** - Use semantic HTML and proper ARIA attributes
6. **Keep components composable** - Leverage Radix UI's unstyled components as base
7. **Use TypeScript** - All components should have proper type definitions
